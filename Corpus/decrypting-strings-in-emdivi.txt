JPCERT/CC Blog


« A Volatility Plugin Created for Detecting Malware Used in Targeted Attacks |
  Main
  | Malware Analysis Training Course at Security Camp Japan 2015 »

Nov 19, 2015
Decrypting Strings in Emdivi
Hello, this is You ‘Tsuru’ Nakatsuru at Analysis Center.
As introduced in the previous blog post, my colleagues presented on the attacks arising in Japan at CODE BLUE 2015, entitled “Revealing the Attack Operations Targeting Japan”.
In this entry, I will introduce the details of an IDAPython script “emdivi_string_decryptor.py”, which JPCERT/CC developed to analyse Emdivi, a remote control malware. The script was also introduced in our presentation at CODE BLUE 2015. Please utilize the script along with the codes, etc., that are already published on JPCERT/CC’s GitHub account.
JPCERTCC/aa-tools · GitHub
https://github.com/JPCERTCC/aa-tools
Encrypted Strings within Emdivi
Emdivi encrypts strings such as URLs that they connect to and stores them in itself. Depending on the sample, encrypted strings are Base64-encoded and stored as in Figure 1, or in other cases, just saved in an encrypted binary format.
Figure 1: Encrypted strings encoded with Base64






In the incident analysis phase, these encrypted strings need to be decrypted in order to identify information such as URLs that the malware connects to, etc. For this purpose, JPCERT/CC developed emdivi_string_decryptor.py.
Analysis on Emdivi’s Decryption Process
Emdivi runs the following process in order to decrypt the strings in itself.
Upon its startup, it calculates the key for decryption, based on the following string information:

The sample’s version strings

The sample’s version strings
e.g. t17.08.26..3340.4444

Random long strings in the sample

Random long strings in the sample
e.g. jp5cQEhSR7xMEdv1JOjh5eKGsMxSCAE5M57CijC8VgN1KMbBvP9 (Omitted hereafter)
It then combines these strings with Base64 encode, MD5 hash value calculation and others to calculate the decryption key as in Figure 2. Depending on Emdivi’s version, it sometimes combines addition and other arithmetic process for this calculation.
Figure 2: Calculated decryption key






Using the decryption key calculated here, Emdivi performs decryption just before it uses the strings. Processes related to the encryption are implemented as classes. Figure 3 shows information of those classes.
Figure 3: Encryption related classes defined within Emdivi






Many samples of Emdivi use XxTEA as in Figure 3, but we have confirmed that some versions use AES. Also, there are some versions that switch the encryption and decryption process, and we have seen that some use XxTEA encryption process for decryption.
After analysing various samples of Emdivi, we were able to summarise the method for the decryption key calculation and the decryption process as in Chart 1 below. For details of the decryption key generation process, please refer to the source codes of emdivi_string_decryptor.py.
Table 1: Decryption process for each Emdivi version

t17t19 and t20 mid versionst20 early and late versions



Decryption process
XxTEA Decryption
XxTEA Encryption
AES Encryption


Method to calculate decryption key
MD5(
MD5(base64(ver))
+
MD5(key_string))

scanf(
"%x%x%x%x",
Inc_Add(ver17_key)
)

Inc_Add(ver17_key)[:24]



MD5(base64(ver))
+
MD5(key_string))
"%x%x%x%x",
Inc_Add(ver17_key)
)
Before Using emdivi_string_decryptor.py
Since emdivi_string_decryptor.py is an IDAPython script, it requires disassembler IDA for execution. Also, the version string used when calculating the decryption key is required for string decryption.
Before actually using the tool, you have to obtain the version string from the memory or communication data.
If you are obtaining the string from the memory, execute Emdivi in an analysis environment and then search for the string in the memory by using debugger, etc. You do not have to worry about virtual environment detection, since the version string is generated before the detection process.
If you are obtaining the version string from the communication data, you would need to decode that data. For decoding, you can use emdivi_postdata_decoder.py which is also made public together with emdivi_string_decryptor.py. Here below is what you will see when executing by giving the data you want to decode to emdivi_postdata_decoder.py’s argument.
Please note that the version string included in the communication data may be different from the string required for the decryption. Therefore, we recommend obtaining the string from the memory.
Executing emdivi_string_decryptor.py
If you have obtained the version string, you are all set. Load the target Emdivi into IDA, and execute emdivi_string_decryptor.py. Then, it will process as follows:

Input version string
Calculate decryption key
Search for encrypted string
Decrypt string
Output results and insert comments in the corresponding section

Input version string
Calculate decryption key
Search for encrypted string
Decrypt string
Output results and insert comments in the corresponding section
Upon execution of emdivi_string_decryptor.py, the following dialog box appears to input the version string.
Figure 4: Dialog box to input version string






After you input the version string, the tool will display the decrypted string in the console, and it will be inserted as a comment to where the encrypted string is stored. This is shown in Figure 5.
Figure 5: Screenshot after executing emdivi_string_decryptor.py






Now you can obtain various information including URLs that the malware connects to. Based on these and other related pieces of information, JPCERT/CC coordinates and handles incidents caused by attack operations involving Emdivi.
In Summary
We hope that the scripts that we made public will contribute in dealing with the attacks relating to Emdivi, and in improving malware analysis techniques.
A blog entry by Kaspersky (see Reference) has revealed that a few versions of Emdivi use the infected users’ SID. Unfortunately, the current version of emdivi_string_decryptor.py is not yet adapted to input SID. Furthermore, it is possible that new versions of Emdivi with other encryption methods may emerge in the future. We welcome any pull requests on GitHub.
Thanks for reading.
-You Nakatsuru

New activity of The Blue Termite APT - Securelist
https://securelist.com/blog/research/71876/new-activity-of-the-blue-termite-apt/

Posted on Nov 19, 2015 in #JPCERT news, #Threats, #Trends in Japan  | Permalink

Recent Posts

Malware “TSCookie”
Identify Mirai Variant Infected Devices from SSDP Response
Investigate Unauthorised Logon Attempts using LogonTracer
Research Report Released: Detecting Lateral Movement through Tracking Event Logs (Version 2)
Visualise Event Logs to Identify Compromised Accounts - LogonTracer - 
Chase up Datper’s Communication Logs with Splunk/Elastic Stack
Detecting Datper Malware from Proxy Logs
What the Avalanche Botnet Takedown Revealed: Banking Trojan Infection in Japan
Clustering Malware Variants Using “impfuzzy for Neo4j”
Research Report Released: Detecting Lateral Movement through Tracking Event Logs

Malware “TSCookie”
Identify Mirai Variant Infected Devices from SSDP Response
Investigate Unauthorised Logon Attempts using LogonTracer
Research Report Released: Detecting Lateral Movement through Tracking Event Logs (Version 2)
Visualise Event Logs to Identify Compromised Accounts - LogonTracer - 
Chase up Datper’s Communication Logs with Splunk/Elastic Stack
Detecting Datper Malware from Proxy Logs
What the Avalanche Botnet Takedown Revealed: Banking Trojan Infection in Japan
Clustering Malware Variants Using “impfuzzy for Neo4j”
Research Report Released: Detecting Lateral Movement through Tracking Event Logs
Categories

#APCERT
#FIRST
#Incident management
#JPCERT news
#Threats
#Trends in Japan
#Tsubame
#Vulnerabilities
Africa
India
Indonesia
Laos
Mongolia
Myanmar
Pacific Islands
Sri Lanka
Thailand

#APCERT
#FIRST
#Incident management
#JPCERT news
#Threats
#Trends in Japan
#Tsubame
#Vulnerabilities
Africa
India
Indonesia
Laos
Mongolia
Myanmar
Pacific Islands
Sri Lanka
Thailand
Access Ranking
Windows Commands Abused by AttackersMalware “TSCookie”Visualise Event Logs to Identify Compromised Accounts - LogonTracer - Research Report Released: Detecting Lateral Movement through Tracking Event Logs (Version 2)Research Report Released: Detecting Lateral Movement through Tracking Event LogsIdentify Mirai Variant Infected Devices from SSDP ResponseInvestigate Unauthorised Logon Attempts using LogonTracerRedLeaves - Malware Based on Open Source RATClassifying Malware using Import API and Fuzzy Hashing – impfuzzy –ChChes – Malware that Communicates with C&C Servers Using Cookie Headers
Windows Commands Abused by Attackers
Malware “TSCookie”
Visualise Event Logs to Identify Compromised Accounts - LogonTracer - 
Research Report Released: Detecting Lateral Movement through Tracking Event Logs (Version 2)
Research Report Released: Detecting Lateral Movement through Tracking Event Logs
Identify Mirai Variant Infected Devices from SSDP Response
Investigate Unauthorised Logon Attempts using LogonTracer
RedLeaves - Malware Based on Open Source RAT
Classifying Malware using Import API and Fuzzy Hashing – impfuzzy –
ChChes – Malware that Communicates with C&C Servers Using Cookie Headers
Links


 JPCERT/CC homepage

 Follow us @jpcert_en
 RSS feed
 Contributor info


 JPCERT/CC homepage

 Follow us @jpcert_en
 RSS feed
 Contributor info

 JPCERT/CC homepage

 Follow us @jpcert_en
 RSS feed
 Contributor info
Archives

March 2018
February 2018
January 2018
December 2017
November 2017
September 2017
August 2017
July 2017
June 2017
May 2017

March 2018
February 2018
January 2018
December 2017
November 2017
September 2017
August 2017
July 2017
June 2017
May 2017
More...
Categories

#APCERT
#FIRST
#Incident management
#JPCERT news
#Threats
#Trends in Japan
#Tsubame
#Vulnerabilities
Africa
India
Indonesia
Laos
Mongolia
Myanmar
Pacific Islands
Sri Lanka
Thailand

#APCERT
#FIRST
#Incident management
#JPCERT news
#Threats
#Trends in Japan
#Tsubame
#Vulnerabilities
Africa
India
Indonesia
Laos
Mongolia
Myanmar
Pacific Islands
Sri Lanka
Thailand
Privacy Policy

Privacy Policy for JPCERT/CC Blog

Privacy Policy for JPCERT/CC Blog
